import tensorflow as tf
import numpy as np
import math
from matplotlib import pyplot as plt

class Tensors:
    def __init__(self, middle_units):
        self.x = tf.placeholder(tf.float32, [None, 900, 11], 'x')
        # x = tf.reshape(self.x, [-1,1])
        # z = tf.layers.dense(x, middle_units, tf.nn.relu)
        z = tf.layers.dense(self.x, middle_units*2, tf.nn.tanh)
        z = tf.layers.dense(z, 1)
        cc = tf.reshape(tf.squeeze(z), [-1,900])
        self.y_predict = tf.layers.dense(cc, 1)
        self.y = tf.placeholder(tf.float32, [None], 'y')

        loss = (self.y_predict - self.y) ** 2
        loss = tf.reduce_mean(loss)


        self.lr = tf.placeholder(tf.float32, [], 'lr')
        opt = tf.train.AdamOptimizer(self.lr)
        self.train_op = opt.minimize(loss)
        self.loss = tf.sqrt(loss)

class Model:
    def __init__(self, middle_units):
        graph = tf.Graph()
        with graph.as_default():
            self.ts = Tensors(middle_units)
            self.session = tf.Session(graph=graph)
            self.session.run(tf.global_variables_initializer())

    def train(self, xs, ys, epoches=10, lr=0.01, eps=0.0001):
        steps = 0
        ts = self.ts
        while epoches is None or steps < epoches:
            _, loss = self.session.run([ts.train_op, ts.loss],{ts.lr: lr, ts.x:xs, ts.y:ys})
            if eps is not None and loss <= eps:
                break
            print('step', steps, ':loss =', loss)
            steps += 1

    def predict(self, xs):
        return self.session.run(self.ts.y_predict, {self.ts.x:xs})

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.session.close()

def get_samples(num):
    xs = np.random.uniform(size=[num, 900, 11])


    ys = np.random.uniform(size=[num])

    return xs, ys

if __name__ == '__main__':
    xs, ys = get_samples(200)
    with Model(10) as model:
        # plt.plot(xs, ys, color='blue')
        model.train(xs, ys, epoches=10)

        xs, yy = get_samples(400)
        ys_predict = model.predict(xs)
        plt.plot(yy, ys_predict, color='red')
        plt.show()
        y1 = zip(yy,ys_predict)
        for i in y1:
            print(i)

